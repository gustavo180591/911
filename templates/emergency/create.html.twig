{# templates/denuncia/create.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Registrar Denuncia{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="mb-4">Registrar Nueva Denuncia</h1>

    {# Muestra mensajes flash de error (si los hay) #}
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">{{ message }}</div>
    {% endfor %}

    {# Form con data-turbo=false para forzar recarga completa al enviar (opcional). #}
    {{ form_start(form, { attr: { 'data-turbo': 'false' } }) }}

    {# Descripción #}
    <div class="mb-3">
        {{ form_label(form.descripcion) }}
        {{ form_widget(form.descripcion, { 'attr': {'class': 'form-control', 'placeholder': 'Describe brevemente la denuncia...'} }) }}
        {{ form_errors(form.descripcion) }}
    </div>

    {# Fecha/Hora #}
    <div class="mb-3">
        {{ form_label(form.fechaHora) }}
        {{ form_widget(form.fechaHora, { 'attr': {'class': 'form-control'} }) }}
        {{ form_errors(form.fechaHora) }}
    </div>

    {# Subform Ubicación #}
    <h3>Datos de Ubicación</h3>
    {# Campo calle #}
<div class="mb-3">
    {{ form_label(form.ubicacion.calle) }}
    {{ form_widget(form.ubicacion.calle, {
        'attr': {
            'onchange': 'onAddressChange()'   # cuando cambia, llamamos geocoding
        }
    }) }}
</div>

{# Campo numero #}
<div class="mb-3">
    {{ form_label(form.ubicacion.numero) }}
    {{ form_widget(form.ubicacion.numero, {
        'attr': {
            'onchange': 'onAddressChange()'
        }
    }) }}
</div>

        {# Campo "coordenadas" hidden #}
    {{ form_widget(form.ubicacion.coordenadas) }}

    {# Mapa Leaflet para ubicar #}
    <div id="map" style="width:100%;height:400px;"></div>

    {# Evidencias (colección dinámica) #}
  <div class="mb-3 mt-3">
    <h4>Evidencias</h4>

    {# Contenedor donde se inyectarán los subformularios #}
    <div id="evidencias-container">
        {% for evidForm in form.evidencias %}
            {{ form_row(evidForm) }}
        {% endfor %}
    </div>

    {# Botón para agregar nuevos subformularios #}
    <button type="button" class="btn btn-secondary" id="add-evid-btn">
        Agregar Evidencia
    </button>
</div>

{# Aquí movemos la definición del "prototype" a un <template> #}
<template id="evidencia-prototype">
    {{ form_widget(form.evidencias.vars.prototype)|raw }}
</template>




    {{ form_end(form) }}

    <div class="mt-3">
        <a href="{{ path('emergency_index') }}" class="btn btn-secondary">Volver a la Lista</a>
    </div>
</div>

{# Librerías Leaflet #}
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

<script>
(function() {
    let map;
    let marker;

    // Con Turbo, usa "turbo:load"; si lo desactivaste, usa "DOMContentLoaded".
    document.addEventListener('turbo:load', () => {
        initializeMap();
        setupDynamicEvidencias(); // tu función para evidencias
    });

    function initializeMap() {
        map = L.map('map').setView([-27.362778, -55.900555], 10);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        const redIcon = L.icon({
            iconUrl: '/images/marker-red.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34]
        });

        // Iniciamos el marcador en un punto arbitrario
        marker = L.marker([-27.362778, -55.900555], {
            draggable: true,
            icon: redIcon
        }).addTo(map).bindPopup('Ubicación aproximada').openPopup();

        // CLICK en el mapa => mover marcador + geocodificación inversa
        map.on('click', (e) => {
            const { lat, lng } = e.latlng;
            placeMarker(lat, lng);
            reverseGeocode(lat, lng);
        });

        // Cuando suelto el marcador tras arrastrar => actualiza coords + geocodificación inversa
        marker.on('moveend', (e) => {
            const { lat, lng } = e.target.getLatLng();
            updateCoords(lat, lng);
            reverseGeocode(lat, lng);
        });

        // También puedes, al cargar, si ya tienes coords, setear el marcador y hacer reverse
        // let coordsField = document.getElementById('{{ form.ubicacion.coordenadas.vars.id }}').value;
        // if (coordsField) {
        //     let [lat, lng] = coordsField.split(',');
        //     placeMarker(lat, lng);
        //     reverseGeocode(lat, lng);
        // }
    }

    // Mueve el marcador y actualiza el campo hidden de coordenadas
    function placeMarker(lat, lng) {
        marker.setLatLng([lat, lng]).openPopup();
        updateCoords(lat, lng);
    }

    function updateCoords(lat, lng) {
        // Actualiza el hidden de coordenadas
        document.getElementById('{{ form.ubicacion.coordenadas.vars.id }}').value = lat + ',' + lng;
    }

    /**
     * Geocodificación inversa: Dadas lat/lng, obtiene la dirección desde Nominatim.
     * Rellena campos "calle" y "numero" si encuentra datos en la respuesta.
     */
    async function reverseGeocode(lat, lng) {
        try {
            const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;
            const response = await fetch(url);
            const data = await response.json();

            if (data.address) {
                // Toma de "address" la calle y número. Ojo, puede no estar disponible en todas las direcciones.
                let road = data.address.road || '';
                let houseNumber = data.address.house_number || '';

                // Asigna a los campos de tu form
                document.getElementById('{{ form.ubicacion.calle.vars.id }}').value = road;
                document.getElementById('{{ form.ubicacion.numero.vars.id }}').value = houseNumber;
            }
        } catch (error) {
            console.error('Error en geocodificación inversa:', error);
        }
    }

    /**
     * Geocodificación directa: Se llama cuando el usuario cambia "calle" o "numero".
     * Busca lat/lng en Nominatim y actualiza el mapa + coordenadas.
     */
    async function onAddressChange() {
        // Obtiene valores del DOM
        const calle = document.getElementById('{{ form.ubicacion.calle.vars.id }}').value;
        const numero = document.getElementById('{{ form.ubicacion.numero.vars.id }}').value;

        if (!calle && !numero) return;

        const address = `${calle} ${numero}, Misiones`; // Ajusta ciudad/provincia/país a tu gusto

        try {
            const url = `https://nominatim.openstreetmap.org/search?format=jsonv2&q=${encodeURIComponent(address)}`;
            const resp = await fetch(url);
            const data = await resp.json();

                if (data.length > 0) {
            let lat = data[0].lat;
            let lng = data[0].lon;
            placeMarker(lat, lng);
            map.setView([lat, lng], 15);
}
        } catch (error) {
            console.error('Error en geocodificación directa:', error);
        }
    }

    // Ejemplo de config para evidencias dinámicas (ajusta a tu caso).
    function setupDynamicEvidencias() {
        // ...
    }

    // Exponemos "onAddressChange" para que puedas llamarlo desde onChange en tus inputs "calle" y "numero"
    window.onAddressChange = onAddressChange;

}

    // Lógica de evidencias dinámicas (colección)
    function setupDynamicEvidencias() {
        const container = document.getElementById('evidencias-container');
        const addBtn    = document.getElementById('add-evid-btn');
        if (!container || !addBtn) return;

        // Cuántos subformularios existen ya
        let index = container.querySelectorAll('.form-group, .mb-3, .form-control').length; 
        // Ajusta el selector a tu HTML real (a veces es .form-group, a veces .mb-3, etc.)

        addBtn.addEventListener('click', () => {
            // Tomamos el prototype
            let prototype = container.dataset.prototype;

            // Symfony usa __name__ como placeholder
            let newForm = prototype.replace(/__name__/g, index);
            index++;

            // Insertamos el nuevo form en el contenedor
            let div = document.createElement('div');
            div.innerHTML = newForm;
            container.appendChild(div);
})();
</script>
{% endblock %}
