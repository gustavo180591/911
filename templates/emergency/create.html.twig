{# templates/denuncia/create.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Registrar Denuncia{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="mb-4">Registrar Nueva Denuncia</h1>

    {# Muestra mensajes flash de error (si los hay) #}
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">{{ message }}</div>
    {% endfor %}

    {# Form con data-turbo=false para forzar recarga completa al enviar (opcional). #}
    {{ form_start(form, { attr: { 'data-turbo': 'false' } }) }}

    {# Descripción #}
    <div class="mb-3">
        {{ form_label(form.descripcion) }}
        {{ form_widget(form.descripcion, { 'attr': {'class': 'form-control', 'placeholder': 'Describe brevemente la denuncia...'} }) }}
        {{ form_errors(form.descripcion) }}
    </div>

    {# Fecha/Hora #}
    <div class="mb-3">
        {{ form_label(form.fechaHora) }}
        {{ form_widget(form.fechaHora, { 'attr': {'class': 'form-control'} }) }}
        {{ form_errors(form.fechaHora) }}
    </div>

    {# Subform Ubicación #}
    <h3>Datos de Ubicación</h3>
    {# Campo calle #}
<div class="mb-3">
    {{ form_label(form.ubicacion.calle) }}
    {{ form_widget(form.ubicacion.calle, {
        'attr': {
            'onchange': 'onAddressChange()'   # cuando cambia, llamamos geocoding
        }
    }) }}
</div>

{# Campo numero #}
<div class="mb-3">
    {{ form_label(form.ubicacion.numero) }}
    {{ form_widget(form.ubicacion.numero, {
        'attr': {
            'onchange': 'onAddressChange()'
        }
    }) }}
</div>

        {# Campo "coordenadas" hidden #}
    {{ form_widget(form.ubicacion.coordenadas) }}

    {# Mapa Leaflet para ubicar #}
    <div id="map" style="width:100%;height:400px;"></div>

    {# Evidencias (colección dinámica) #}
    <div class="mb-3 mt-3">
        <h4>Evidencias</h4>
        <ul id="evidencias-list" data-prototype="{{ form_widget(form.evidencias.vars.prototype)|e('html_attr') }}">
            {% for evidencia in form.evidencias %}
                <li>{{ form_row(evidencia.imageFile) }}</li>
            {% endfor %}
        </ul>
        <button type="button" class="btn btn-secondary" id="add-evidencia-btn">Agregar Evidencia</button>
    </div>

{# Aquí movemos la definición del "prototype" a un <template> #}





    {{ form_end(form) }}

    <div class="mt-3">
        <a href="{{ path('emergency_index') }}" class="btn btn-secondary">Volver a la Lista</a>
    </div>
</div>
</div>
{# Librerías Leaflet #}
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />



<script>
// Encapsulamos todo el código en una función autoejecutable para evitar variables globales
document.addEventListener('turbo:load', function() {
    // --- Inicialización del mapa ---
    const mapElement = document.getElementById('map');
    if (!mapElement) return; // Si no existe el contenedor, salimos

    // Si el contenedor ya fue inicializado por Leaflet, limpiamos su ID
    if (mapElement._leaflet_id) {
        mapElement._leaflet_id = null;
    }

    const initialCoords = [-27.362778, -55.900555];
    window.map = L.map(mapElement).setView(initialCoords, 10);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '© OpenStreetMap contributors'
    }).addTo(window.map);

    const redIcon = L.icon({
        iconUrl: '/images/marker-red.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34]
    });

    const marker = L.marker(initialCoords, {
        draggable: true,
        icon: redIcon
    }).addTo(window.map).bindPopup('Ubicación aproximada').openPopup();

    window.map.on('click', (e) => {
        const { lat, lng } = e.latlng;
        placeMarker(marker, lat, lng);
        reverseGeocode(lat, lng);
    });

    marker.on('moveend', (e) => {
        const { lat, lng } = e.target.getLatLng();
        updateCoords(lat, lng);
        reverseGeocode(lat, lng);
    });

    function placeMarker(marker, lat, lng) {
        marker.setLatLng([lat, lng]).openPopup();
        updateCoords(lat, lng);
    }

    function updateCoords(lat, lng) {
        const coordsField = document.getElementById('{{ form.ubicacion.coordenadas.vars.id }}');
        if (coordsField) {
            coordsField.value = ${lat},${lng};
        }
    }

    async function reverseGeocode(lat, lng) {
        try {
            const url = https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng};
            const response = await fetch(url);
            const data = await response.json();
            if (data.address) {
                const road = data.address.road || '';
                const houseNumber = data.address.house_number || '';
                const calleField = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
                const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
                if (calleField) calleField.value = road;
                if (numeroField) numeroField.value = houseNumber;
            }
        } catch (error) {
            console.error('Error en geocodificación inversa:', error);
        }
    }

    async function onAddressChange() {
        const calleField = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
        const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
        if (!calleField || !numeroField) return;
        const calle = calleField.value;
        const numero = numeroField.value;
        if (!calle && !numero) return;
        const address = ${calle} ${numero}, Misiones;
        try {
            const url = https://nominatim.openstreetmap.org/search?format=jsonv2&q=${encodeURIComponent(address)};
            const response = await fetch(url);
            const data = await response.json();
            if (data.length > 0) {
                const { lat, lon } = data[0];
                placeMarker(marker, lat, lon);
                window.map.setView([lat, lon], 15);
            }
        } catch (error) {
            console.error('Error en geocodificación directa:', error);
        }
    }

    // Asignar eventos a los campos de dirección utilizando los IDs generados por Symfony
    const calleField = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
    const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
    if (calleField) calleField.addEventListener('change', onAddressChange);
    if (numeroField) numeroField.addEventListener('change', onAddressChange);

    // --- Manejo de la colección de evidencias ---
    const evidenciasList = document.getElementById('evidencias-list');
    const addEvidenciaBtn = document.getElementById('add-evidencia-btn');
    if (evidenciasList && addEvidenciaBtn) {
        const prototype = evidenciasList.dataset.prototype;
        let index = evidenciasList.children.length;
        addEvidenciaBtn.addEventListener('click', function() {
            const newForm = prototype.replace(/_name_/g, index);
            const newFormLi = document.createElement('li');
            newFormLi.innerHTML = newForm;
            evidenciasList.appendChild(newFormLi);
            index++;
        });
    }
});

</script>
{% endblock %}