{% extends 'base.html.twig' %}

{% block title %}Registrar Emergencia{% endblock %}

{% block body %}
<div class="container mt-4" style="position: relative;">
    <h1 class="mb-4">Registrar Nueva Emergencia</h1>

    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">
            {{ message }}
        </div>
    {% endfor %}

    {{ form_start(form) }}

    <div class="mb-3">
        {{ form_label(form.descripcion, 'Descripción de la Emergencia') }}
        {{ form_widget(form.descripcion, { 'attr': {'class': 'form-control'} }) }}
        {{ form_errors(form.descripcion) }}
    </div>

    <div class="mb-3">
        {{ form_label(form.fechaHora, 'Fecha y Hora del Incidente') }}
        {{ form_widget(form.fechaHora, { 'attr': {'class': 'form-control', 'readonly': 'readonly'} }) }}
        {{ form_errors(form.fechaHora) }}
    </div>

<div class="mb-3">
    <label for="direccion-input" class="form-label">Dirección</label>
    <input type="text" id="direccion-input" name="direccion" class="form-control" placeholder="Escribe la dirección..." required />
</div>

    

    <input type="hidden" id="latitud" name="latitud">
    <input type="hidden" id="longitud" name="longitud">

    <div id="map-container" style="position: relative; min-height: 400px;">
        <div id="map"></div>
    </div>

    <div class="mb-3">
        <h3>Evidencias</h3>
        <ul class="evidencias" data-prototype="{{ form_widget(form.evidencias.vars.prototype)|e('html_attr') }}">
            {% for evidencia in form.evidencias %}
                <li>{{ form_row(evidencia) }}</li>
            {% endfor %}
        </ul>

        <button type="button" class="btn btn-secondary add_evidencia_link" data-collection-holder-class="evidencias">
            Agregar Evidencia
        </button>
    </div>

    <button type="submit" class="btn btn-primary">Registrar</button>

    {{ form_end(form) }}

    <div class="mt-3">
        <a href="{{ path('emergency_index') }}" class="btn btn-secondary">Volver a la Lista de Emergencias</a>
    </div>
</div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

<style>
    #map {
        width: 100% !important;
        height: 400px !important;
        background: #f0f0f0;
        border: 2px dashed #ccc;
    }
    #map:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }
</style>
<script>
(function() {
    let map = null;
    let marker = null;

    // Turbo Drive integration
    document.addEventListener("turbo:load", initializeMap);
    document.addEventListener("turbo:before-cache", cleanupMap);

    function initializeMap() {
        const mapContainer = document.getElementById('map');
        if (!mapContainer || map) return;

        // Initialize map
        map = L.map('map').setView([-27.362778, -55.900555], 13);
        
        // Configure tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Configure marker
        const redIcon = L.icon({
            iconUrl: '/images/marker-red.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34]
        });

        marker = L.marker([-27.362778, -55.900555], {
            draggable: true,
            icon: redIcon
        }).addTo(map).bindPopup('Posadas, Misiones').openPopup();

        // Event handlers
        setupMapEvents();
        setupAddressInput();
        forceResize();
    }

    function setupMapEvents() {
        map.on('click', (e) => {
            const lat = e.latlng.lat;
            const lon = e.latlng.lng;
            
            marker.setLatLng([lat, lon]).openPopup();
            document.getElementById('latitud').value = lat;
            document.getElementById('longitud').value = lon;
            
            reverseGeocode(lat, lon);
        });
    }

    function setupAddressInput() {
        const direccionInput = document.getElementById('direccion-input');
        direccionInput.addEventListener('change', () => {
            geocodeAddress(direccionInput.value);
        });
    }

    async function reverseGeocode(lat, lon) {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
            const data = await response.json();
            const address = data.address || {};
            document.getElementById('direccion-input').value = 
                `${address.road || ''} ${address.house_number || ''}, ${address.city || 'Posadas'}`;
        } catch (error) {
            console.error('Error en geocoding inverso:', error);
        }
    }

    async function geocodeAddress(address) {
        try {
            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);
            const data = await response.json();
            
            if (data.length > 0) {
                const lat = data[0].lat;
                const lon = data[0].lon;
                
                document.getElementById('latitud').value = lat;
                document.getElementById('longitud').value = lon;
                marker.setLatLng([lat, lon]).bindPopup(address).openPopup();
                map.setView([lat, lon], 15);
            }
        } catch (error) {
            console.error('Error en geocoding:', error);
        }
    }

    function forceResize() {
        setTimeout(() => {
            if (map) map.invalidateSize(true);
        }, 100);
    }

    function cleanupMap() {
        if (map) {
            map.remove();
            map = null;
            marker = null;
        }
    }

    // Evidencias
    document.addEventListener('DOMContentLoaded', () => {
        const addButton = document.querySelector('.add_evidencia_link');
        const evidenciasHolder = document.querySelector('ul.evidencias');

        addButton.addEventListener('click', () => {
            const index = evidenciasHolder.children.length;
            const newForm = evidenciasHolder.dataset.prototype.replace(/__name__/g, index);
            const li = document.createElement('li');
            li.innerHTML = newForm;
            evidenciasHolder.appendChild(li);
        });
    });

    // Zona horaria
    document.addEventListener('DOMContentLoaded', () => {
        const fechaHoraInput = document.querySelector('#{{ form.fechaHora.vars.id }}');
        if (fechaHoraInput) {
            const now = new Date(Date.now() - 10800000); // UTC-3
            fechaHoraInput.value = now.toISOString().slice(0, 16);
        }
    });
})();
</script>
{% endblock %}