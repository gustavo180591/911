{% extends 'base.html.twig' %}

{% block title %}Registrar Emergencia{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1 class="mb-4">Registrar Nueva Emergencia</h1>

    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">
            {{ message }}
        </div>
    {% endfor %}

    {{ form_start(form) }}

    <div class="mb-3">
        {{ form_label(form.descripcion, 'Descripción de la Emergencia') }}
        {{ form_widget(form.descripcion, { 'attr': {'class': 'form-control'} }) }}
        {{ form_errors(form.descripcion) }}
    </div>

    <div class="mb-3">
        {{ form_label(form.fechaHora, 'Fecha y Hora del Incidente') }}
        {{ form_widget(form.fechaHora, { 'attr': {'class': 'form-control', 'readonly': 'readonly'} }) }}
        {{ form_errors(form.fechaHora) }}
    </div>

    <div class="mb-3">
        <label for="direccion-input" class="form-label">Dirección</label>
        <input type="text" id="direccion-input" name="direccion" class="form-control" placeholder="Escribe la dirección..." />
    </div>

    <!-- Campos ocultos para almacenar coordenadas -->
    <input type="hidden" id="latitud" name="latitud">
    <input type="hidden" id="longitud" name="longitud">

    <div id="map" style="width: 10cm; height: 10cm;" class="mt-3"></div>

    <div class="mb-3">
        <h3>Evidencias</h3>
        <ul class="evidencias" data-prototype="{{ form_widget(form.evidencias.vars.prototype)|e('html_attr') }}">
            {% for evidencia in form.evidencias %}
                <li>{{ form_row(evidencia) }}</li>
            {% endfor %}
        </ul>

        <button type="button" class="btn btn-secondary add_evidencia_link" data-collection-holder-class="evidencias">
            Agregar Evidencia
        </button>
    </div>

    <button type="submit" class="btn btn-primary">Registrar</button>

    {{ form_end(form) }}

    <div class="mt-3">
        <a href="{{ path('emergency_index') }}" class="btn btn-secondary">Volver a la Lista de Emergencias</a>
    </div>
</div>

<!-- Leaflet -->
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Inicializar el mapa centrado en Posadas
        const map = L.map('map').setView([-27.362778, -55.900555], 13);
        const direccionInput = document.querySelector('#direccion-input');
        const latitudInput = document.querySelector('#latitud');
        const longitudInput = document.querySelector('#longitud');

        // Asegurar que el mapa se renderiza correctamente
        setTimeout(() => {
            map.invalidateSize();
        }, 500);

        // Agregar capa de OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
        }).addTo(map);

       // Configurar el ícono del marcador rojo con la imagen local
const redIcon = L.icon({
    iconUrl: '/images/marker-red.png',  // Usa la imagen guardada en public/images/
    iconSize: [25, 41],  // Tamaño del icono
    iconAnchor: [12, 41],  // Punto de anclaje del icono
    popupAnchor: [1, -34]  // Punto donde aparece el popup
});

// Crear marcador rojo en Posadas
let marker = L.marker([-27.362778, -55.900555], {
    draggable: true,
    icon: redIcon
}).addTo(map).bindPopup('Posadas, Misiones').openPopup();


        // 🟢 Evento: Cuando el usuario hace **clic en el mapa**
        map.on('click', function(e) {
            const lat = e.latlng.lat;
            const lon = e.latlng.lng;

            // Mover el marcador a la nueva ubicación
            marker.setLatLng([lat, lon]).bindPopup('Ubicación seleccionada').openPopup();

            // Actualizar inputs de coordenadas
            latitudInput.value = lat;
            longitudInput.value = lon;

            // Obtener dirección de las coordenadas (Geocoding inverso)
            fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`)
                .then(response => response.json())
                .then(data => {
                    if (data.address) {
                        let calle = data.address.road || 'Calle desconocida';
                        let numero = data.address.house_number || '';
                        let ciudad = data.address.city || 'Posadas';

                        // Construir la dirección
                        let direccionCompleta = `${calle} ${numero}, ${ciudad}`;

                        // Actualizar el input de dirección
                        direccionInput.value = direccionCompleta;
                    } else {
                        direccionInput.value = 'Dirección no encontrada';
                    }
                })
                .catch(error => console.error('Error obteniendo la dirección:', error));
        });

        // 🟠 Evento: Cuando el usuario **escribe en el input de dirección**
        direccionInput.addEventListener('change', function() {
            const direccion = direccionInput.value;

            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(direccion)}`)
                .then(response => response.json())
                .then(data => {
                    if (data.length > 0) {
                        let lat = data[0].lat;
                        let lon = data[0].lon;

                        // Actualizar inputs de coordenadas
                        latitudInput.value = lat;
                        longitudInput.value = lon;

                        // Mover el marcador a la nueva ubicación
                        marker.setLatLng([lat, lon]).bindPopup(direccion).openPopup();
                        map.setView([lat, lon], 15);
                    } else {
                        alert('Ubicación no encontrada.');
                    }
                })
                .catch(error => console.error('Error buscando la ubicación:', error));
        });

    });

    // JavaScript para manejar la colección dinámica de evidencias
    document.addEventListener('DOMContentLoaded', function() {
        const addEvidenciaButton = document.querySelector('.add_evidencia_link');
        const evidenciasHolder = document.querySelector('ul.evidencias');

        addEvidenciaButton.addEventListener('click', function() {
            const prototype = evidenciasHolder.dataset.prototype;
            const index = evidenciasHolder.children.length;

            const newForm = prototype.replace(/__name__/g, index);
            const newFormLi = document.createElement('li');
            newFormLi.innerHTML = newForm;
            evidenciasHolder.appendChild(newFormLi);
        });
    });

    // 🕒 Ajustar la zona horaria a Buenos Aires (-3)
    document.addEventListener('DOMContentLoaded', function() {
        const fechaHoraInput = document.querySelector('#{{ form.fechaHora.vars.id }}');

        if (fechaHoraInput) {
            const now = new Date();

            // Ajustar la hora a -3 de Buenos Aires
            now.setHours(now.getHours() - 3);

            const formattedDate = now.toISOString().slice(0, 16); // Formato YYYY-MM-DDTHH:MM
            fechaHoraInput.value = formattedDate;
        }
    });

</script>
{% endblock %}
