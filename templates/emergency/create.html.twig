{% extends 'base.html.twig' %}

{% block title %}{{ title|default('Registrar Emergencia') }}{% endblock %}

{% block body %}
<style>
    /* ================== RESET / BASE ================== */
    body {
        font-family: 'Montserrat', sans-serif;
        background-color: #191D33;
        color: #FFFFFF;
        margin: 0;
        padding: 0;
    }

    /* ================== HEADER ================== */
    header {
        display: flex;
        align-items: center;
        justify-content: space-between; /* Distribuye el logo a la izquierda y los elementos de la derecha de forma exacta */
        padding: 20px 40px;
        background-color: #191D33;
    }
    .logo-container {
        display: flex;
        align-items: center;
        cursor: pointer;
        /* Se ha eliminado el margen extra para alinear el logo justo a la izquierda */
    }
    .logo-container img.favicon {
        height: 40px;
        width: auto;
        margin-right: 10px;
    }
    .SAC-logo {
        height: 50px;
        width: auto;
    }
    /* Contenedor para agrupar el menú y el perfil a la derecha */
    .header-right {
        display: flex;
        align-items: center;
        gap: 30px; /* Espaciado uniforme entre elementos */
        /* Se eliminan márgenes adicionales ya que el header con justify-content: space-between se encarga de la distribución */
    }
    nav.main-nav {
        display: flex;
        align-items: center;
        gap: 20px;
    }
    .inicio-button {
        background-color: transparent;
        border-radius: 9999px;
        padding: 10px 30px;
        font-weight: bold;
        font-size: 16px;
        color: #E5A74E;
        text-decoration: none;
        transition: background-color 0.2s ease, color 0.2s ease;
    }
    .inicio-button:hover {
        color: #FFFFFF;
    }
    .about-button {
        background-color: transparent;
        border-radius: 9999px;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 14px;
        color: #FFFFFF;
        text-decoration: none;
        transition: color 0.2s ease;
    }
    .about-button:hover {
        color: #ECB13A;
    }
    .contact-button {
        background-color: #ECB13A;
        border-radius: 9999px;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 14px;
        color: #FFFFFF;
        text-decoration: none;
        transition: background-color 0.2s ease;
    }
    .contact-button:hover {
        background-color: #dca02a;
    }
    .user-profile {
        position: relative;
        display: flex;
        align-items: center;
    }
    .profile-image {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
    }
    .profile-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: #1E2240;
        border-radius: 0.25rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 150px;
        z-index: 10;
        display: none;
        margin-top: 5px;
        padding: 8px 0;
    }
    .profile-dropdown.show {
        display: block;
    }
    .dropdown-item {
        display: block;
        padding: 10px 15px;
        color: white;
        text-decoration: none;
        transition: background-color 0.2s;
        font-size: 14px;
    }
    .dropdown-item:hover {
        background-color: #2e325a;
    }
    .profile-button {
        display: flex;
        align-items: center;
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0;
    }
    .profile-button .arrow {
        margin-left: 5px;
        font-size: 12px;
    }

    /* ================== FORMULARIO ================== */
    /* Contenedor del formulario centrado según la imagen */
    .container.mt-4 {
        max-width: 600px;
        margin: 2rem auto; /* Centrado horizontal */
    }
    h1 {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
    }
    label {
        display: block;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        color: #ffffff;
    }
    .form-group {
        margin-bottom: 1.5rem;
    }
    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        background-color: #191D33;
        color: #ffffff;
        border: 1px solid #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        box-sizing: border-box;
        font-size: 0.9rem;
    }
    .form-control:focus {
        outline: none;
        border: 2px solid #ECB13A;
    }
    .form-control1 {
        width: 100%;
        padding: 0.75rem 1rem;
        background-color: #191D33;
        color: #FFFFFF;
        border: 1px solid #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        box-sizing: border-box;
        font-size: 0.9rem;
        resize: vertical;
        min-height: 120px;
    }
    .form-control1:focus {
        outline: none;
        border: 2px solid #ECB13A;
    }
    .date-input-container {
        position: relative;
        display: flex;
        align-items: center;
    }
    .date-input-container .calendar-icon {
        position: absolute;
        right: 15px;
        pointer-events: none;
        color: #999999;
    }
    .map-container {
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    #map {
        width: 100%;
        height: 200px;
        pointer-events: auto;
        z-index: 1;
    }
    .evidence-upload {
        position: static;
        z-index: 2;
        background-color: #F5F5F5;
        border-radius: 8px;
        padding: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        color: #666;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .evidence-upload:hover {
        background-color: #E9E9E9;
    }
    .evidence-upload svg {
        margin-bottom: 0.5rem;
    }
    .register-button {
        background-color: #EA633F;
        color: #FFFFFF;
        font-weight: bold;
        border: none;
        border-radius: 9999px;
        padding: 12px 24px;
        font-size: 18px;
        cursor: pointer;
        display: block;
        margin: 1.5rem auto 0 auto;
    }
    .register-button:hover {
        background-color: #E22D26;
    }
    .alert.alert-danger {
        background-color: #ff4d4d;
        color: #ffffff;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
     /* Botón hamburguesa */
        .nav-toggle {
            display: none;
            font-size: 24px;
            color: #FFFFFF;
            cursor: pointer;
            background: none;
            border: none;
            z-index: 1002;
            transition: all 0.3s ease;
        }

        /* Menú de navegación */
        nav#nav-menu {
            display: flex;
            gap: 20px;
            align-items: center;
        }
        nav#nav-menu.active {
            display: flex;
        }

        .about-button,
        .contact-button {
            display: inline-block;
            padding: 10px 30px;
            font-weight: 700;
            font-size: 16px;
            text-align: center;
            text-decoration: none;
            transition: all 0.3s ease;
        }
        .about-button {
            background-color: transparent;
            color: #FFFFFF;
            border-radius: 9999px;
        }
        .about-button:hover {
            color: #ECB13A;
        }
        .contact-button {
            background-color: #ECB13A;
            color: #FFFFFF;
            border-radius: 9999px;
        }
        .contact-button:hover {
            background-color: #d9a035;
        }

        /* Responsive: mobile */
        @media (max-width: 768px) {
            header {
                padding: 15px 20px;
            }
            .nav-toggle {
                display: block;
            }
            nav#nav-menu {
                display: none;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                text-align: center;
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background-color: rgba(0, 0, 0, 0.95);
                z-index: 1000;
                padding: 0;
                transition: all 0.3s ease-in-out;
            }
            nav#nav-menu.active {
                display: flex;
            }
            .about-button,
            .contact-button {
                width: 100%;
                padding: 15px 0;
                margin: 8px 0;
                font-size: 20px;
            }
            .contact-button {
                border: 2px solid #ECB13A;
                margin-top: 20px;
                width: auto;
            }
            .inicio-button{
            color: #E5A74E;
        }

            .inicio-button:hover {
            color: #FFFFFF;
            transform: translateY(-2px);
        }
        }

    /* Estilos para la carga de archivos */
    .file-upload-container {
        position: relative;
        overflow: hidden;
        margin-bottom: 15px;
        border: 2px dashed rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        transition: all 0.3s ease;
        background-color: rgba(0, 0, 0, 0.1);
    }
    
    .file-upload-container:hover {
        border-color: #ECB13A;
        background-color: rgba(255, 255, 255, 0.05);
    }
    
    .file-upload-container.file-selected {
        border-style: solid;
        background-color: rgba(40, 167, 69, 0.05);
    }
    
    .file-upload-label {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: rgba(255, 255, 255, 0.9);
    }
    
    .file-upload-icon {
        color: #ECB13A;
        font-size: 30px;
        margin-bottom: 10px;
    }
    
    .file-upload-text {
        font-size: 0.9rem;
        margin-bottom: 5px;
    }
    
    .file-upload-subtext {
        font-size: 0.7rem;
        color: rgba(255, 255, 255, 0.5);
    }
    
    .file-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
    
    .file-preview {
        margin-top: 15px;
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        overflow: hidden;
        display: none;
        background-color: rgba(0, 0, 0, 0.2);
        padding: 10px;
    }
    
    .file-preview.show {
        display: block;
    }
    
    .file-preview img {
        width: 100%;
        max-height: 200px;
        object-fit: contain;
        border-radius: 4px;
    }
    
    .file-name {
        margin-top: 5px;
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
        word-break: break-all;
    }
    
    .file-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.6);
        margin-top: 5px;
    }
    
    .file-remove {
        color: #F05A45;
        cursor: pointer;
        background: none;
        border: none;
        font-size: 0.8rem;
        padding: 3px 8px;
        border-radius: 4px;
        transition: all 0.2s ease;
    }
    
    .file-remove:hover {
        background-color: rgba(240, 90, 69, 0.2);
    }
    
    .file-type {
        display: inline-block;
        padding: 2px 6px;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }
    
    .file-size {
        margin-left: 10px;
    }
    
    .progress-container {
        width: 100%;
        background-color: rgba(255, 255, 255, 0.1);
        height: 4px;
        border-radius: 2px;
        margin-top: 10px;
        display: none;
    }
    
    .progress-bar {
        height: 100%;
        background-color: #ECB13A;
        border-radius: 2px;
        width: 0%;
        transition: width 0.3s ease;
    }
    
    .file-validation-error {
        color: #F05A45;
        font-size: 0.85rem;
        margin-top: 8px;
        border-radius: 4px;
        display: none;
        padding: 5px 10px;
        background-color: rgba(240, 90, 69, 0.1);
    }
    
    .file-validation-error.show {
        display: block;
    }

    /* Estilos adicionales para video */
    .file-preview video {
        max-width: 100%;
        max-height: 300px;
        border-radius: 4px;
        background-color: #000;
    }
    
    .video-controls {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 10px;
    }
    
    .video-controls button {
        background: rgba(255, 255, 255, 0.1);
        border: none;
        color: white;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .video-controls button:hover {
        background: rgba(255, 255, 255, 0.2);
    }
    
    .video-controls button:active {
        background: rgba(255, 255, 255, 0.3);
    }
    
    .video-duration {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
        margin-top: 5px;
        text-align: center;
    }
</style>

<header>
    <div class="logo-container" onclick="window.location.href='{{ path('home_index') }}'">
        <img src="{{ asset('images/favicon.png') }}" alt="SAC" class="favicon"/>
        <img src="{{ asset('images/SAC-blanco.png') }}" alt="SAC" class="SAC-logo"/>
    </div>
    <div class="header-right">
        <button class="nav-toggle" id="nav-toggle" aria-label="Abrir menú">☰</button>
        <nav id="nav-menu">
            <a href="{{ path('app_login') }}" class="inicio-button">INICIO</a>
            <a href="{{ path('home_about') }}" class="about-button">SOBRE NOSOTROS</a>
            <a href="{{ path('home_contact') }}" class="contact-button">CONTACTO</a>
        </nav>
        {% include 'fragments/profile-menu.html.twig' %}
    </div>
</header>

<div class="container mt-4">
    <h1>Registro de incidente</h1>

    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">{{ message }}</div>
    {% endfor %}

    {{ form_start(form, { attr: { 'data-turbo': 'false' } }) }}

    <div class="form-group">
        {{ form_label(form.fechaHora, 'Fecha y hora del incidente') }}
        <div class="date-input-container">
            {{ form_widget(form.fechaHora, { 
                'attr': {
                    'class': 'form-control',
                    'placeholder': 'dd/mm/aa --:-- --'
                }
            }) }}
            <span class="calendar-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" 
                     viewBox="0 0 24 24" fill="none" stroke="currentColor" 
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
            </span>
        </div>
        {{ form_errors(form.fechaHora) }}
    </div>

   <div class="form-group" style="display: flex; gap: 1rem;">
       <!-- Ajuste interno para posicionamiento exacto -->
       <div style="flex: 1; margin-right: 10px;">
           {{ form_label(form.ubicacion.calle, 'Ubicación') }}
           {{ form_widget(form.ubicacion.calle, {
               'attr': {
                   'class': 'form-control',
                   'onchange': 'onAddressChange()',
                   'placeholder': 'Ingrese la dirección'
               }
           }) }}
           {{ form_errors(form.ubicacion.calle) }}
       </div>
       <div style="width: 150px; margin-left: 10px;">
           {{ form_label(form.ubicacion.numero, 'Número') }}
           {{ form_widget(form.ubicacion.numero, {
               'attr': {
                   'class': 'form-control',
                   'onchange': 'onAddressChange()',
                   'placeholder': 'Número'
               }
           }) }}
           {{ form_errors(form.ubicacion.numero) }}
       </div>
   </div>

    <div class="form-group">
        <label>Vista previa del mapa</label>
        <div class="map-container">
            <div id="map"></div>
        </div>
    </div>

    <div class="form-group">
        {{ form_label(form.descripcion, 'Descripción') }}
        {{ form_widget(form.descripcion, {
            'attr': {
                'class': 'form-control1',
                'placeholder': 'Describa brevemente los hechos...'
            }
        }) }}
        {{ form_errors(form.descripcion) }}
    </div>

    <div class="form-group">
        <div class="file-upload-container" id="evidence-upload-container">
            <label for="evidence-input" class="file-upload-label">
                <div class="file-upload-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                        <polyline points="17 8 12 3 7 8"></polyline>
                        <line x1="12" y1="3" x2="12" y2="15"></line>
                    </svg>
                </div>
                <div class="file-upload-text">Arrastra o haz clic para subir evidencia</div>
                <div class="file-upload-subtext">JPG, PNG, PDF o MP4 - Máximo 100MB por archivo</div>
            </label>
            <input type="file" id="evidence-input" class="file-input" accept="image/jpeg,image/png,application/pdf,video/mp4,video/quicktime,video/x-msvideo" multiple style="position: absolute; width: 100%; height: 100%; opacity: 0; cursor: pointer; z-index: 2;">
            <div class="file-preview" id="evidence-preview"></div>
            <div class="file-validation-error" id="evidence-error"></div>
            <div class="progress-container" id="evidence-progress">
                <div class="progress-bar" id="evidence-progress-bar"></div>
            </div>
        </div>
        {{ form_widget(form.ubicacion.coordenadas) }}
    </div>

    <div class="form-group text-center">
        <button type="submit" class="register-button">Registrar</button>
    </div>

    {{ form_end(form) }}
</div>

<script>
  document.addEventListener('turbo:load', initPage);
  document.addEventListener('DOMContentLoaded', initPage);

  function initPage() {
    // ——— Dropdown de perfil ———
    const profileButton   = document.getElementById('profileButton');
    const profileDropdown = document.getElementById('profileDropdown');
    if (profileButton && profileDropdown) {
      profileButton.addEventListener('click', e => {
        e.stopPropagation();
        profileDropdown.classList.toggle('show');
      });
      document.addEventListener('click', () => {
        profileDropdown.classList.remove('show');
      });
    }

    // ——— Upload de evidencia ———
    const uploadContainer  = document.getElementById('evidence-upload-container');
    const evidenciasList   = document.getElementById('evidencias-list');
    if (uploadContainer && evidenciasList) {
      uploadContainer.addEventListener('click', () => {
        const prototype = evidenciasList.dataset.prototype;
        const index     = evidenciasList.children.length;
        const newForm   = prototype.replace(/_name_/g, index);
        const li        = document.createElement('li');
        li.innerHTML    = newForm;
        evidenciasList.appendChild(li);
        const fileInput = li.querySelector('input[type="file"]');
        if (fileInput) fileInput.click();
      });
    }

    // ——— Mapa y geocodificación ———
    const mapEl = document.getElementById('map');
    if (mapEl) {
      // Reset Leaflet cuando Turbo vuelve a montar la sección
      if (mapEl._leaflet_id) mapEl._leaflet_id = null;

      const initialCoords = [-27.362778, -55.900555];
      window.map = L.map(mapEl).setView(initialCoords, 10);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'OpenStreetMap contributors'
      }).addTo(window.map);

      const redIcon = L.icon({
        iconUrl: '/images/marker-icon.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34]
      });
      let marker = L.marker(initialCoords, { draggable: true, icon: redIcon }).addTo(window.map);

      // Actualiza el campo coords
      function updateCoords(lat, lng) {
        const field = document.getElementById('{{ form.ubicacion.coordenadas.vars.id }}');
        if (field) field.value = lat + ',' + lng;
      }

      // Reverse geocode para calle y número
      async function reverseGeocode(lat, lng) {
        try {
          const res  = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`);
          const data = await res.json();
          if (data.address) {
            const road  = data.address.road || '';
            const number = data.address.house_number || '';
            const calleField   = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
            const numeroField  = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
            if (calleField)  calleField.value  = road;
            if (numeroField) numeroField.value = number;
          }
        } catch (err) {
          console.error('Error en geocodificación inversa:', err);
        }
      }

      // Geocoding directo al cambiar input
      async function onAddressChange() {
        const calleField  = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
        const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
        if (!calleField || !numeroField) return;
        const calle  = calleField.value;
        const numero = numeroField.value;
        if (!calle && !numero) return;
        const address = `${calle} ${numero}, Misiones`;
        try {
          const res  = await fetch(`https://nominatim.openstreetmap.org/search?format=jsonv2&q=${encodeURIComponent(address)}`);
          const data = await res.json();
          if (data.length > 0) {
            const { lat, lon } = data[0];
            marker.setLatLng([lat, lon]).openPopup();
            updateCoords(lat, lon);
            window.map.setView([lat, lon], 15);
          }
        } catch (err) {
          console.error('Error en geocodificación directa:', err);
        }
      }

      // Eventos del mapa
      window.map.on('click', e => {
        const { lat, lng } = e.latlng;
        marker.setLatLng([lat, lng]).openPopup();
        updateCoords(lat, lng);
        reverseGeocode(lat, lng);
      });
      marker.on('moveend', () => {
        const { lat, lng } = marker.getLatLng();
        updateCoords(lat, lng);
        reverseGeocode(lat, lng);
      });

      // Atacha listeners a los inputs de dirección
      const calleField  = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
      const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
      if (calleField)  calleField.addEventListener('change', onAddressChange);
      if (numeroField) numeroField.addEventListener('change', onAddressChange);
    }
  };
  document.addEventListener('DOMContentLoaded', () => {
    // Toggle del menú hamburguesa
    const navToggle = document.getElementById('nav-toggle');
    const navMenu = document.getElementById('nav-menu');
    
    navToggle.addEventListener('click', () => {
        navMenu.classList.toggle('active');
        navToggle.innerHTML = navMenu.classList.contains('active') ? '✕' : '☰';
    });
    
    // Cerrar menú al hacer clic en un enlace
    const links = document.querySelectorAll('#nav-menu a');
    links.forEach(link => {
        link.addEventListener('click', () => {
            navMenu.classList.remove('active');
            navToggle.innerHTML = '☰';
        });
    });
    
    // Efecto de scroll en el header - modificado para evitar recargas
    const header = document.getElementById('header');
    if (header) {
        let scrollTimeout;
        window.addEventListener('scroll', () => {
            // Usar debounce para evitar múltiples actualizaciones
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                if (window.scrollY > 20) {
                    header.classList.add('scrolled');
                } else {
                    header.classList.remove('scrolled');
                }
            }, 10);
        });
    }

    // Toggle de visibilidad de contraseña
    const passwordField = document.getElementById('password');
    const togglePasswordIcon = document.getElementById('togglePassword');
    togglePasswordIcon.addEventListener('click', () => {
        if (passwordField.type === 'password') {
            passwordField.type = 'text';
            togglePasswordIcon.classList.replace('fa-eye', 'fa-eye-slash');
        } else {
            passwordField.type = 'password';
            togglePasswordIcon.classList.replace('fa-eye-slash', 'fa-eye');
        }
    });
  });
  
</script>

<script>
function initEvidenceUpload() {
    const uploadContainer = document.getElementById('evidence-upload-container');
    const evidenciasList = document.getElementById('evidencias-list');
    if (uploadContainer && evidenciasList) {
        // Elimina listeners previos
        uploadContainer.replaceWith(uploadContainer.cloneNode(true));
        const newUploadContainer = document.getElementById('evidence-upload-container');
        newUploadContainer.addEventListener('click', () => {
            const prototype = evidenciasList.dataset.prototype;
            const index = evidenciasList.children.length;
            const newForm = prototype.replace(/_name_/g, index);
            const li = document.createElement('li');
            li.innerHTML = newForm;
            evidenciasList.appendChild(li);
            const fileInput = li.querySelector('input[type="file"]');
            if (fileInput) fileInput.click();
        });
    }
}

document.addEventListener('DOMContentLoaded', initEvidenceUpload);
document.addEventListener('turbo:load', initEvidenceUpload);
</script>

<script>
// Clase para manejar la validación y carga de archivos
class ImageValidator {
    constructor(inputId, previewId, errorId, progressId, progressBarId, containerId) {
        this.input = document.getElementById(inputId);
        this.preview = document.getElementById(previewId);
        this.error = document.getElementById(errorId);
        this.progress = document.getElementById(progressId);
        this.progressBar = document.getElementById(progressBarId);
        this.container = document.getElementById(containerId);
        
        this.maxSize = 104857600; // 100MB
        this.allowedTypes = [
            'image/jpeg', 
            'image/png', 
            'application/pdf',
            'video/mp4',
            'video/quicktime',
            'video/x-msvideo'
        ];
        
        this.files = new Map(); // Almacena los archivos cargados
        this.setupListeners();
    }
    
    setupListeners() {
        // File selection event
        this.input.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            files.forEach(file => this.validateAndProcessFile(file));
        });
        
        // Click event for the container
        this.container.addEventListener('click', (e) => {
            // Evitar que el clic se propague si se hace clic en un botón de eliminar
            if (e.target.closest('.file-remove')) {
                return;
            }
            this.input.click();
        });
        
        // Drag and drop events
        this.container.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.container.style.borderColor = '#ECB13A';
            this.container.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';
        });
        
        this.container.addEventListener('dragleave', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.container.style.borderColor = 'rgba(255, 255, 255, 0.2)';
            this.container.style.backgroundColor = '';
        });
        
        this.container.addEventListener('drop', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            this.container.style.borderColor = 'rgba(255, 255, 255, 0.2)';
            this.container.style.backgroundColor = '';
            
            const dt = e.dataTransfer;
            const files = Array.from(dt.files);
            
            files.forEach(file => {
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                this.input.files = dataTransfer.files;
                this.validateAndProcessFile(file);
            });
        });
        
        // Prevent opening file on drop
        window.addEventListener('dragover', (e) => {
            e.preventDefault();
            return false;
        });
        
        window.addEventListener('drop', (e) => {
            e.preventDefault();
            return false;
        });
    }
    
    validateAndProcessFile(file) {
        console.log('Validando archivo:', file.name);
        this.resetErrors();
        
        // Validate file size
        if (file.size > this.maxSize) {
            this.showError(`El archivo ${file.name} es demasiado grande (${this.formatFileSize(file.size)}). El tamaño máximo permitido es ${this.formatFileSize(this.maxSize)}.`);
            return false;
        }
        
        // Validate file type
        if (!this.allowedTypes.includes(file.type)) {
            this.showError(`Tipo de archivo no válido para ${file.name}. Solo se permiten imágenes JPG, PNG, PDF y videos MP4.`);
            return false;
        }
        
        // Show progress animation
        this.showProgress();
        
        // Process file
        const reader = new FileReader();
        
        reader.onprogress = (e) => {
            if (e.lengthComputable) {
                const percentLoaded = Math.round((e.loaded / e.total) * 100);
                this.updateProgress(percentLoaded);
            }
        };
        
        reader.onload = (e) => {
            console.log('Archivo leído correctamente');
            
            // Update progress to 100%
            this.updateProgress(100);
            
            // Show preview
            setTimeout(() => {
                this.hideProgress();
                this.addFilePreview(e.target.result, file);
            }, 500);
        };
        
        reader.onerror = () => {
            console.error('Error al leer el archivo');
            this.hideProgress();
            this.showError('Error al leer el archivo.');
        };
        
        reader.readAsDataURL(file);
        return true;
    }
    
    addFilePreview(dataUrl, file) {
        const fileId = Date.now() + Math.random().toString(36).substr(2, 9);
        this.files.set(fileId, file);
        
        let previewContent = '';
        const isImage = file.type.startsWith('image/');
        const isVideo = file.type.startsWith('video/');
        
        if (isImage) {
            previewContent = `<img src="${dataUrl}" alt="Vista previa">`;
        } else if (isVideo) {
            previewContent = `
                <video controls>
                    <source src="${dataUrl}" type="${file.type}">
                    Tu navegador no soporta el elemento de video.
                </video>
            `;
        } else {
            previewContent = `<div class="file-icon"><i class="fas fa-file-pdf fa-3x"></i></div>`;
        }
        
        const previewItem = document.createElement('div');
        previewItem.className = 'preview-item';
        previewItem.dataset.fileId = fileId;
        
        previewItem.innerHTML = `
            <button type="button" class="file-remove" title="Eliminar archivo">×</button>
            <div class="preview-content">
                ${previewContent}
            </div>
            <div class="file-info">
                <div class="file-name">${file.name}</div>
                <div class="file-meta">
                    <span class="file-type">${file.type.split('/')[1].toUpperCase()}</span>
                    <span class="file-size">${this.formatFileSize(file.size)}</span>
                </div>
            </div>
        `;
        
        // Configurar controles de video si es un video
        if (isVideo) {
            const video = previewItem.querySelector('video');
            if (video) {
                video.addEventListener('ended', () => {
                    video.currentTime = 0;
                });
            }
        }
        
        // Configurar botón de eliminar
        const removeButton = previewItem.querySelector('.file-remove');
        if (removeButton) {
            removeButton.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.removeFile(fileId);
            });
        }
        
        // Asegurar que existe el contenedor de grid
        if (!this.preview.querySelector('.preview-grid')) {
            this.preview.innerHTML = '<div class="preview-grid"></div>';
        }
        
        this.preview.querySelector('.preview-grid').appendChild(previewItem);
        this.preview.classList.add('show');
        this.container.classList.add('file-selected');
    }
    
    removeFile(fileId) {
        const previewItem = this.preview.querySelector(`[data-file-id="${fileId}"]`);
        if (previewItem) {
            previewItem.remove();
            this.files.delete(fileId);
            
            // Si no hay más archivos, ocultar el contenedor de preview
            if (this.files.size === 0) {
                this.preview.classList.remove('show');
                this.container.classList.remove('file-selected');
            }
        }
    }
    
    showError(message) {
        this.error.textContent = message;
        this.error.classList.add('show');
    }
    
    resetErrors() {
        this.error.textContent = '';
        this.error.classList.remove('show');
    }
    
    showProgress() {
        this.progress.style.display = 'block';
        this.updateProgress(0);
    }
    
    hideProgress() {
        setTimeout(() => {
            this.progress.style.display = 'none';
        }, 300);
    }
    
    updateProgress(percent) {
        this.progressBar.style.width = `${percent}%`;
    }
    
    // Convierte el tamaño del archivo en bytes a una representación más amigable
    // (por ejemplo, 1024 bytes se convierte en "1 KB")
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
}

// Inicializar el validador cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    const evidenceValidator = new ImageValidator(
        'evidence-input',
        'evidence-preview',
        'evidence-error',
        'evidence-progress',
        'evidence-progress-bar',
        'evidence-upload-container'
    );
});
</script>
{% endblock %}

