{% extends 'base.html.twig' %}

{% block title %}{{ title|default('Registrar Emergencia') }}{% endblock %}

{% block body %}
<style>
    /* ================== RESET / BASE ================== */
    body {
        font-family: 'Montserrat', sans-serif;
        background-color: #191D33;
        color: #FFFFFF;
        margin: 0;
        padding: 0;
    }

    /* ================== HEADER ================== */
    header {
        display: flex;
        align-items: center;
        justify-content: space-between; /* Distribuye el logo a la izquierda y los elementos de la derecha de forma exacta */
        padding: 20px 40px;
        background-color: #191D33;
    }
    .logo-container {
        display: flex;
        align-items: center;
        cursor: pointer;
        /* Se ha eliminado el margen extra para alinear el logo justo a la izquierda */
    }
    .logo-container img.favicon {
        height: 40px;
        width: auto;
        margin-right: 10px;
    }
    .SAC-logo {
        height: 50px;
        width: auto;
    }
    /* Contenedor para agrupar el menú y el perfil a la derecha */
    .header-right {
        display: flex;
        align-items: center;
        gap: 30px; /* Espaciado uniforme entre elementos */
        /* Se eliminan márgenes adicionales ya que el header con justify-content: space-between se encarga de la distribución */
    }
    nav.main-nav {
        display: flex;
        align-items: center;
        gap: 20px;
    }
    .inicio-button {
        background-color: transparent;
        border-radius: 9999px;
        padding: 10px 30px;
        font-weight: bold;
        font-size: 16px;
        color: #E5A74E;
        text-decoration: none;
        transition: background-color 0.2s ease, color 0.2s ease;
    }
    .inicio-button:hover {
        color: #FFFFFF;
    }
    .about-button {
        background-color: transparent;
        border-radius: 9999px;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 14px;
        color: #FFFFFF;
        text-decoration: none;
        transition: color 0.2s ease;
    }
    .about-button:hover {
        color: #ECB13A;
    }
    .contact-button {
        background-color: #ECB13A;
        border-radius: 9999px;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 14px;
        color: #FFFFFF;
        text-decoration: none;
        transition: background-color 0.2s ease;
    }
    .contact-button:hover {
        background-color: #dca02a;
    }
    .user-profile {
        position: relative;
        display: flex;
        align-items: center;
    }
    .profile-image {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
    }
    .profile-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: #1E2240;
        border-radius: 0.25rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 150px;
        z-index: 10;
        display: none;
        margin-top: 5px;
        padding: 8px 0;
    }
    .profile-dropdown.show {
        display: block;
    }
    .dropdown-item {
        display: block;
        padding: 10px 15px;
        color: white;
        text-decoration: none;
        transition: background-color 0.2s;
        font-size: 14px;
    }
    .dropdown-item:hover {
        background-color: #2e325a;
    }
    .profile-button {
        display: flex;
        align-items: center;
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0;
    }
    .profile-button .arrow {
        margin-left: 5px;
        font-size: 12px;
    }

    /* ================== FORMULARIO ================== */
    /* Contenedor del formulario centrado según la imagen */
    .container.mt-4 {
        max-width: 600px;
        margin: 2rem auto; /* Centrado horizontal */
    }
    h1 {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
    }
    label {
        display: block;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        color: #ffffff;
    }
    .form-group {
        margin-bottom: 1.5rem;
    }
    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        background-color: #191D33;
        color: #ffffff;
        border: 1px solid #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        box-sizing: border-box;
        font-size: 0.9rem;
    }
    .form-control:focus {
        outline: none;
        border: 2px solid #ECB13A;
    }
    .form-control1 {
        width: 100%;
        padding: 0.75rem 1rem;
        background-color: #191D33;
        color: #FFFFFF;
        border: 1px solid #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        box-sizing: border-box;
        font-size: 0.9rem;
        resize: vertical;
        min-height: 120px;
    }
    .form-control1:focus {
        outline: none;
        border: 2px solid #ECB13A;
    }
    .date-input-container {
        position: relative;
        display: flex;
        align-items: center;
    }
    .date-input-container .calendar-icon {
        position: absolute;
        right: 15px;
        pointer-events: none;
        color: #999999;
    }
    .map-container {
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    #map {
        width: 100%;
        height: 200px;
        pointer-events: auto;
        z-index: 1;
    }
    .evidence-upload {
        position: static;
        z-index: 2;
        background-color: #F5F5F5;
        border-radius: 8px;
        padding: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        color: #666;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .evidence-upload:hover {
        background-color: #E9E9E9;
    }
    .evidence-upload svg {
        margin-bottom: 0.5rem;
    }
    .register-button {
        background-color: #EA633F;
        color: #FFFFFF;
        font-weight: bold;
        border: none;
        border-radius: 9999px;
        padding: 12px 24px;
        font-size: 18px;
        cursor: pointer;
        display: block;
        margin: 1.5rem auto 0 auto;
    }
    .register-button:hover {
        background-color: #E22D26;
    }
    .alert.alert-danger {
        background-color: #ff4d4d;
        color: #ffffff;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
     /* Botón hamburguesa */
        .nav-toggle {
            display: none;
            font-size: 24px;
            color: #FFFFFF;
            cursor: pointer;
            background: none;
            border: none;
            z-index: 1002;
            transition: all 0.3s ease;
        }

        /* Menú de navegación */
        nav#nav-menu {
            display: flex;
            gap: 20px;
            align-items: center;
        }
        nav#nav-menu.active {
            display: flex;
        }

        .about-button,
        .contact-button {
            display: inline-block;
            padding: 10px 30px;
            font-weight: 700;
            font-size: 16px;
            text-align: center;
            text-decoration: none;
            transition: all 0.3s ease;
        }
        .about-button {
            background-color: transparent;
            color: #FFFFFF;
            border-radius: 9999px;
        }
        .about-button:hover {
            color: #ECB13A;
        }
        .contact-button {
            background-color: #ECB13A;
            color: #FFFFFF;
            border-radius: 9999px;
        }
        .contact-button:hover {
            background-color: #d9a035;
        }

        /* Responsive: mobile */
        @media (max-width: 768px) {
            header {
                padding: 15px 20px;
            }
            .nav-toggle {
                display: block;
            }
            nav#nav-menu {
                display: none;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                text-align: center;
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background-color: rgba(0, 0, 0, 0.95);
                z-index: 1000;
                padding: 0;
                transition: all 0.3s ease-in-out;
            }
            nav#nav-menu.active {
                display: flex;
            }
            .about-button,
            .contact-button {
                width: 100%;
                padding: 15px 0;
                margin: 8px 0;
                font-size: 20px;
            }
            .contact-button {
                border: 2px solid #ECB13A;
                margin-top: 20px;
                width: auto;
            }
            .inicio-button{
            color: #E5A74E;
        }

            .inicio-button:hover {
            color: #FFFFFF;
            transform: translateY(-2px);
        }
        }
</style>

<header>
    <div class="logo-container" onclick="window.location.href='{{ path('home_index') }}'">
        <img src="{{ asset('images/favicon.png') }}" alt="SAC" class="favicon"/>
        <img src="{{ asset('images/SAC-blanco.png') }}" alt="SAC" class="SAC-logo"/>
    </div>
    <div class="header-right">
        <button class="nav-toggle" id="nav-toggle" aria-label="Abrir menú">☰</button>
        <nav id="nav-menu">
            <a href="{{ path('app_login') }}" class="inicio-button">INICIO</a>
            <a href="{{ path('home_about') }}" class="about-button">SOBRE NOSOTROS</a>
            <a href="{{ path('home_contact') }}" class="contact-button">CONTACTO</a>
        </nav>
        {% include 'fragments/profile-menu.html.twig' %}
    </div>
</header>

<div class="container mt-4">
    <h1>Registro de incidente</h1>

    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">{{ message }}</div>
    {% endfor %}

    {{ form_start(form, { attr: { 'data-turbo': 'false' } }) }}

    <div class="form-group">
        {{ form_label(form.fechaHora, 'Fecha y hora del incidente') }}
        <div class="date-input-container">
            {{ form_widget(form.fechaHora, { 
                'attr': {
                    'class': 'form-control',
                    'placeholder': 'dd/mm/aa --:-- --'
                }
            }) }}
            <span class="calendar-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" 
                     viewBox="0 0 24 24" fill="none" stroke="currentColor" 
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
            </span>
        </div>
        {{ form_errors(form.fechaHora) }}
    </div>

   <div class="form-group" style="display: flex; gap: 1rem;">
       <!-- Ajuste interno para posicionamiento exacto -->
       <div style="flex: 1; margin-right: 10px;">
           {{ form_label(form.ubicacion.calle, 'Ubicación') }}
           {{ form_widget(form.ubicacion.calle, {
               'attr': {
                   'class': 'form-control',
                   'onchange': 'onAddressChange()',
                   'placeholder': 'Ingrese la dirección'
               }
           }) }}
           {{ form_errors(form.ubicacion.calle) }}
       </div>
       <div style="width: 150px; margin-left: 10px;">
           {{ form_label(form.ubicacion.numero, 'Número') }}
           {{ form_widget(form.ubicacion.numero, {
               'attr': {
                   'class': 'form-control',
                   'onchange': 'onAddressChange()',
                   'placeholder': 'Número'
               }
           }) }}
           {{ form_errors(form.ubicacion.numero) }}
       </div>
   </div>

    <div class="form-group">
        <label>Vista previa del mapa</label>
        <div class="map-container">
            <div id="map"></div>
        </div>
    </div>

    <div class="form-group">
        {{ form_label(form.descripcion, 'Descripción') }}
        {{ form_widget(form.descripcion, {
            'attr': {
                'class': 'form-control1',
                'placeholder': 'Describa brevemente los hechos...'
            }
        }) }}
        {{ form_errors(form.descripcion) }}
    </div>

    <div class="form-group">
        <div class="evidence-upload" id="evidence-upload-container">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" 
                 viewBox="0 0 24 24" fill="none" stroke="currentColor" 
                 stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="17 8 12 3 7 8"></polyline>
                <line x1="12" y1="3" x2="12" y2="15"></line>
            </svg>
            <span>Upload a File</span>
            <span style="font-size: 12px;">Drag and drop files here</span>
        </div>
        {{ form_widget(form.ubicacion.coordenadas) }}
        <ul id="evidencias-list" data-prototype="{{ form_widget(form.evidencias.vars.prototype)|e('html_attr') }}" style="list-style: none; padding: 0;"></ul>
    </div>

    <div class="form-group text-center">
        <button type="submit" class="register-button">Registrar</button>
    </div>

    {{ form_end(form) }}
</div>

<script>
  document.addEventListener('turbo:load', initPage);
  document.addEventListener('DOMContentLoaded', initPage);

  function initPage() {
    // ——— Dropdown de perfil ———
    const profileButton   = document.getElementById('profileButton');
    const profileDropdown = document.getElementById('profileDropdown');
    if (profileButton && profileDropdown) {
      profileButton.addEventListener('click', e => {
        e.stopPropagation();
        profileDropdown.classList.toggle('show');
      });
      document.addEventListener('click', () => {
        profileDropdown.classList.remove('show');
      });
    }

    // ——— Upload de evidencia ———
    const uploadContainer  = document.getElementById('evidence-upload-container');
    const evidenciasList   = document.getElementById('evidencias-list');
    if (uploadContainer && evidenciasList) {
      uploadContainer.addEventListener('click', () => {
        const prototype = evidenciasList.dataset.prototype;
        const index     = evidenciasList.children.length;
        const newForm   = prototype.replace(/_name_/g, index);
        const li        = document.createElement('li');
        li.innerHTML    = newForm;
        evidenciasList.appendChild(li);
        const fileInput = li.querySelector('input[type="file"]');
        if (fileInput) fileInput.click();
      });
    }

    // ——— Mapa y geocodificación ———
    const mapEl = document.getElementById('map');
    if (mapEl) {
      // Reset Leaflet cuando Turbo vuelve a montar la sección
      if (mapEl._leaflet_id) mapEl._leaflet_id = null;

      const initialCoords = [-27.362778, -55.900555];
      window.map = L.map(mapEl).setView(initialCoords, 10);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'OpenStreetMap contributors'
      }).addTo(window.map);

      const redIcon = L.icon({
        iconUrl: '/images/marker-icon.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34]
      });
      let marker = L.marker(initialCoords, { draggable: true, icon: redIcon }).addTo(window.map);

      // Actualiza el campo coords
      function updateCoords(lat, lng) {
        const field = document.getElementById('{{ form.ubicacion.coordenadas.vars.id }}');
        if (field) field.value = lat + ',' + lng;
      }

      // Reverse geocode para calle y número
      async function reverseGeocode(lat, lng) {
        try {
          const res  = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`);
          const data = await res.json();
          if (data.address) {
            const road  = data.address.road || '';
            const number = data.address.house_number || '';
            const calleField   = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
            const numeroField  = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
            if (calleField)  calleField.value  = road;
            if (numeroField) numeroField.value = number;
          }
        } catch (err) {
          console.error('Error en geocodificación inversa:', err);
        }
      }

      // Geocoding directo al cambiar input
      async function onAddressChange() {
        const calleField  = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
        const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
        if (!calleField || !numeroField) return;
        const calle  = calleField.value;
        const numero = numeroField.value;
        if (!calle && !numero) return;
        const address = `${calle} ${numero}, Misiones`;
        try {
          const res  = await fetch(`https://nominatim.openstreetmap.org/search?format=jsonv2&q=${encodeURIComponent(address)}`);
          const data = await res.json();
          if (data.length > 0) {
            const { lat, lon } = data[0];
            marker.setLatLng([lat, lon]).openPopup();
            updateCoords(lat, lon);
            window.map.setView([lat, lon], 15);
          }
        } catch (err) {
          console.error('Error en geocodificación directa:', err);
        }
      }

      // Eventos del mapa
      window.map.on('click', e => {
        const { lat, lng } = e.latlng;
        marker.setLatLng([lat, lng]).openPopup();
        updateCoords(lat, lng);
        reverseGeocode(lat, lng);
      });
      marker.on('moveend', () => {
        const { lat, lng } = marker.getLatLng();
        updateCoords(lat, lng);
        reverseGeocode(lat, lng);
      });

      // Atacha listeners a los inputs de dirección
      const calleField  = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
      const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
      if (calleField)  calleField.addEventListener('change', onAddressChange);
      if (numeroField) numeroField.addEventListener('change', onAddressChange);
    }
  };
  document.addEventListener('DOMContentLoaded', () => {
            // Toggle del menú hamburguesa
            const navToggle = document.getElementById('nav-toggle');
            const navMenu = document.getElementById('nav-menu');
            
            navToggle.addEventListener('click', () => {
                navMenu.classList.toggle('active');
                navToggle.innerHTML = navMenu.classList.contains('active') ? '✕' : '☰';
            });
            
            // Cerrar menú al hacer clic en un enlace
            const links = document.querySelectorAll('#nav-menu a');
            links.forEach(link => {
                link.addEventListener('click', () => {
                    navMenu.classList.remove('active');
                    navToggle.innerHTML = '☰';
                });
            });
            
            // Efecto de scroll en el header
            const header = document.getElementById('header');
            window.addEventListener('scroll', () => {
                if (window.scrollY > 20) {
                    header.classList.add('scrolled');
                } else {
                    header.classList.remove('scrolled');
                }
            });

            // Toggle de visibilidad de contraseña
            const passwordField = document.getElementById('password');
            const togglePasswordIcon = document.getElementById('togglePassword');
            togglePasswordIcon.addEventListener('click', () => {
                if (passwordField.type === 'password') {
                    passwordField.type = 'text';
                    togglePasswordIcon.classList.replace('fa-eye', 'fa-eye-slash');
                } else {
                    passwordField.type = 'password';
                    togglePasswordIcon.classList.replace('fa-eye-slash', 'fa-eye');
                }
            });
        });
  
</script>

<script>
function initEvidenceUpload() {
    const uploadContainer = document.getElementById('evidence-upload-container');
    const evidenciasList = document.getElementById('evidencias-list');
    if (uploadContainer && evidenciasList) {
        // Elimina listeners previos
        uploadContainer.replaceWith(uploadContainer.cloneNode(true));
        const newUploadContainer = document.getElementById('evidence-upload-container');
        newUploadContainer.addEventListener('click', () => {
            const prototype = evidenciasList.dataset.prototype;
            const index = evidenciasList.children.length;
            const newForm = prototype.replace(/_name_/g, index);
            const li = document.createElement('li');
            li.innerHTML = newForm;
            evidenciasList.appendChild(li);
            const fileInput = li.querySelector('input[type="file"]');
            if (fileInput) fileInput.click();
        });
    }
}

document.addEventListener('DOMContentLoaded', initEvidenceUpload);
document.addEventListener('turbo:load', initEvidenceUpload);
</script>
{% endblock %}
