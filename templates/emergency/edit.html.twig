{% extends 'base.html.twig' %}

{% block title %}{{ title|default('Editar Emergencia') }}{% endblock %}

{% block body %}
<style>
    /* ================== RESET / BASE ================== */
    body {
        font-family: 'Montserrat', sans-serif;
        background-color: #191D33;
        color: #FFFFFF;
        margin: 0;
        padding: 0;
    }

    /* ================== HEADER ================== */
    header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 20px 40px;
        background-color: #191D33;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    .logo-container {
        display: flex;
        align-items: center;
        cursor: pointer;
        transition: transform 0.3s ease;
    }
    .logo-container:hover {
        transform: scale(1.02);
    }
    .logo-container img.favicon {
        height: 40px;
        width: auto;
        margin-right: 10px;
    }
    .saci-logo {
        height: 50px;
        width: auto;
    }
    .header-right {
        display: flex;
        align-items: center;
        gap: 30px;
    }
    nav.main-nav {
        display: flex;
        align-items: center;
        gap: 20px;
    }
    .inicio-button {
        background-color: transparent;
        border-radius: 9999px;
        padding: 10px 30px;
        font-weight: bold;
        font-size: 16px;
        color: #E5A74E;
        text-decoration: none;
        transition: all 0.3s ease;
    }
    .inicio-button:hover {
        color: #FFFFFF;
        transform: translateY(-2px);
    }
    .about-button {
        background-color: transparent;
        border-radius: 9999px;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 14px;
        color: #FFFFFF;
        text-decoration: none;
        transition: all 0.3s ease;
    }
    .about-button:hover {
        color: #ECB13A;
        transform: translateY(-2px);
    }
    .contact-button {
        background-color: #ECB13A;
        border-radius: 9999px;
        padding: 10px 20px;
        font-weight: bold;
        font-size: 14px;
        color: #FFFFFF;
        text-decoration: none;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(236, 177, 58, 0.3);
    }
    .contact-button:hover {
        background-color: #dca02a;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(236, 177, 58, 0.4);
    }
    .user-profile {
        position: relative;
        display: flex;
        align-items: center;
    }
    .profile-image {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.3s ease;
    }
    .profile-button:hover .profile-image {
        border-color: rgba(236, 177, 58, 0.5);
        transform: scale(1.05);
    }
    .profile-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: #1E2240;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        width: 160px;
        z-index: 10;
        display: none;
        margin-top: 8px;
        padding: 8px 0;
        border: 1px solid #2e325a;
        transform-origin: top right;
    }
    .profile-dropdown.show {
        display: block;
        animation: dropdownFadeIn 0.3s ease;
    }
    @keyframes dropdownFadeIn {
        from { opacity: 0; transform: translateY(-10px) scale(0.95); }
        to { opacity: 1; transform: translateY(0) scale(1); }
    }
    .dropdown-item {
        display: block;
        padding: 12px 15px;
        color: white;
        text-decoration: none;
        transition: all 0.3s ease;
        font-size: 14px;
    }
    .dropdown-item:hover {
        background-color: #2e325a;
        padding-left: 18px;
    }
    .profile-button {
        display: flex;
        align-items: center;
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0;
        gap: 8px;
    }
    .profile-button .arrow {
        margin-left: 5px;
        font-size: 12px;
        transition: transform 0.3s ease;
    }
    .profile-button:hover .arrow {
        transform: translateY(2px);
    }

    /* ================== FORMULARIO ================== */
    .container.mt-4 {
        max-width: 650px;
        margin: 2.5rem auto;
        animation: fadeIn 0.5s ease-out;
    }
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    h1 {
        font-size: 1.85rem;
        font-weight: 700;
        margin-bottom: 1.8rem;
        text-align: center;
        color: #fff;
        position: relative;
        padding-bottom: 12px;
    }
    h1::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 80px;
        height: 3px;
        background: linear-gradient(90deg, #E5A74E, #ECB13A);
        border-radius: 3px;
    }
    label {
        display: block;
        font-size: 0.9rem;
        margin-bottom: 0.6rem;
        color: #ECB13A;
        font-weight: 600;
    }
    .form-group {
        margin-bottom: 1.8rem;
        transition: transform 0.2s ease;
    }
    .form-group:focus-within {
        transform: translateY(-2px);
    }
    .form-control {
        width: 100%;
        padding: 0.85rem 1rem;
        background-color: #232644;
        color: #ffffff;
        border: 1px solid #2e325a;
        border-radius: 10px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.15);
        box-sizing: border-box;
        font-size: 0.95rem;
        transition: all 0.3s ease;
    }
    .form-control:focus {
        outline: none;
        border: 1px solid #ECB13A;
        box-shadow: 0 0 0 3px rgba(236, 177, 58, 0.2);
        background-color: #252849;
    }
    .form-control1 {
        width: 100%;
        padding: 0.85rem 1rem;
        background-color: #232644;
        color: #FFFFFF;
        border: 1px solid #2e325a;
        border-radius: 10px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.15);
        box-sizing: border-box;
        font-size: 0.95rem;
        resize: vertical;
        min-height: 100px;
        max-height: 200px;
        transition: all 0.3s ease;
    }
    .form-control1:focus {
        outline: none;
        border: 1px solid #ECB13A;
        box-shadow: 0 0 0 3px rgba(236, 177, 58, 0.2);
        background-color: #252849;
    }
    .date-input-container {
        position: relative;
        display: flex;
        align-items: center;
    }
    .date-input-container .calendar-icon {
        position: absolute;
        right: 15px;
        pointer-events: none;
        color: #9ca3af;
    }
    .map-container {
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        border: 1px solid #2e325a;
        transition: all 0.3s ease;
    }
    .map-container:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(0,0,0,0.25);
    }
    #map {
        width: 100%;
        height: 250px;
    }
    
    /* Estilos para la sección de evidencias existentes */
    .existing-evidence {
        margin-bottom: 1.5rem;
    }
    .evidence-gallery {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        margin-top: 12px;
        margin-bottom: 20px;
    }
    .evidence-item {
        position: relative;
        width: 100px;
        height: 100px;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }
    .evidence-item:hover {
        transform: scale(1.05);
        box-shadow: 0 5px 12px rgba(0, 0, 0, 0.3);
    }
    .evidence-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease;
    }
    .evidence-item:hover .evidence-image {
        transform: scale(1.1);
    }
    .evidence-remove {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 22px;
        height: 22px;
        background-color: rgba(0, 0, 0, 0.6);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        opacity: 0;
    }
    .evidence-item:hover .evidence-remove {
        opacity: 1;
    }
    .evidence-remove:hover {
        background-color: rgba(229, 62, 62, 0.9);
        transform: scale(1.1);
    }
    
    .evidence-upload {
        background-color: #232644;
        border: 2px dashed #2e325a;
        border-radius: 10px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        color: #9ca3af;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .evidence-upload:hover {
        border-color: #ECB13A;
        background-color: #252849;
        transform: translateY(-2px);
    }
    .evidence-upload svg {
        margin-bottom: 0.8rem;
        color: #ECB13A;
        transition: transform 0.3s ease;
    }
    .evidence-upload:hover svg {
        transform: translateY(-5px);
    }
    
    /* Solución para el error de validación - ocultar con opacity en lugar de display:none */
    .file-input-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        opacity: 0;
        overflow: hidden;
        z-index: -1;
    }
    
    /* Estilos para los botones */
    .button-container {
        display: flex;
        gap: 16px;
        margin-top: 2rem;
        justify-content: center;
    }
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        user-select: none;
        border: 1px solid transparent;
        padding: 12px 24px;
        font-size: 16px;
        line-height: 1.5;
        border-radius: 10px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        cursor: pointer;
        text-decoration: none;
        gap: 10px;
    }
    .btn-primary {
        background-color: #ECB13A;
        color: white !important;
        box-shadow: 0 4px 10px rgba(236, 177, 58, 0.25);
    }
    .btn-primary:hover {
        background-color: #dca02a;
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(236, 177, 58, 0.35);
    }
    .btn-secondary {
        background-color: #2e325a;
        color: white !important;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    }
    .btn-secondary:hover {
        background-color: #373b6d;
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.25);
    }
    .btn svg {
        transition: transform 0.3s ease;
    }
    .btn:hover svg {
        transform: translateY(-2px);
    }
    
    .alert.alert-danger {
        background-color: rgba(229, 62, 62, 0.1);
        color: #e53e3e;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        border-left: 4px solid #e53e3e;
        animation: alertSlideIn 0.5s ease;
    }
    @keyframes alertSlideIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        header {
            padding: 16px 20px;
        }
        .header-right {
            gap: 16px;
        }
        nav.main-nav {
            display: none;
        }
        .container.mt-4 {
            padding: 0 20px;
        }
        .button-container {
            flex-direction: column;
        }
    }
    @media (max-width: 768px) {
        .container.mt-4 {
            padding: 0 10px;
            max-width: 100vw;
        }
        .form-group {
            margin-bottom: 1rem;
        }
        .register-button {
            width: 100%;
            font-size: 1.1rem;
        }
        .evidence-upload {
            padding: 1rem 0.5rem;
            font-size: 0.95rem;
        }
        #map {
            height: 160px;
        }
    }
    .selected-files-preview {
        margin-top: 10px;
        font-size: 13px;
        color: #ccc;
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }
    .selected-files-preview .file-thumb {
        display: flex;
        align-items: center;
        gap: 5px;
        background: #232644;
        border-radius: 6px;
        padding: 3px 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }
    .selected-files-preview img {
        width: 28px;
        height: 28px;
        object-fit: cover;
        border-radius: 4px;
    }
</style>

<header>
    <div class="logo-container" onclick="window.location.href='{{ path('home_index') }}'">
        <img src="{{ asset('images/favicon.png') }}" alt="SACI" class="favicon"/>
        <img src="{{ asset('images/saci-blanco.png') }}" alt="SACI" class="saci-logo"/>
    </div>
    <div class="header-right">
        <button class="nav-toggle" id="nav-toggle" aria-label="Abrir menú">☰</button>
        <nav id="nav-menu">
            <a href="{{ path('app_login') }}" class="inicio-button">INICIO</a>
            <a href="{{ path('home_about') }}" class="about-button">SOBRE NOSOTROS</a>
            <a href="{{ path('home_contact') }}" class="contact-button">CONTACTO</a>
        </nav>
        {% include 'fragments/profile-menu.html.twig' %}
    </div>
</header>

<div class="container mt-4">
    <h1>Editar Emergencia</h1>

    {% for message in app.flashes('error') %}
        <div class="alert alert-danger">{{ message }}</div>
    {% endfor %}

    {{ form_start(form, { attr: { 'data-turbo': 'false' } }) }}

    <div class="form-group">
        {{ form_label(form.fechaHora, 'Fecha y hora del incidente') }}
        <div class="date-input-container">
            {{ form_widget(form.fechaHora, { 
                'attr': {
                    'class': 'form-control',
                    'placeholder': 'dd/mm/aa --:-- --'
                }
            }) }}
            <span class="calendar-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" 
                     viewBox="0 0 24 24" fill="none" stroke="currentColor" 
                     stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
            </span>
        </div>
        {{ form_errors(form.fechaHora) }}
    </div>

   <div class="form-group" style="display: flex; gap: 1rem;">
       <div style="flex: 1; margin-right: 10px;">
           {{ form_label(form.ubicacion.calle, 'Ubicación') }}
           {{ form_widget(form.ubicacion.calle, {
               'attr': {
                   'class': 'form-control',
                   'onchange': 'onAddressChange()',
                   'placeholder': 'Ingrese la dirección'
               }
           }) }}
           {{ form_errors(form.ubicacion.calle) }}
       </div>
       <div style="width: 150px; margin-left: 10px;">
           {{ form_label(form.ubicacion.numero, 'Número') }}
           {{ form_widget(form.ubicacion.numero, {
               'attr': {
                   'class': 'form-control',
                   'onchange': 'onAddressChange()',
                   'placeholder': 'Número'
               }
           }) }}
           {{ form_errors(form.ubicacion.numero) }}
       </div>
   </div>

    <div class="form-group">
        <label>Vista previa del mapa</label>
        <div class="map-container">
            <div id="map"></div>
        </div>
    </div>

    <div class="form-group">
        {{ form_label(form.descripcion, 'Descripción') }}
        {{ form_widget(form.descripcion, {
            'attr': {
                'class': 'form-control1',
                'placeholder': 'Describa brevemente los hechos...'
            }
        }) }}
        {{ form_errors(form.descripcion) }}
    </div>

    <div class="form-group">
        <div class="evidence-upload" id="evidence-upload-container">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" 
                 viewBox="0 0 24 24" fill="none" stroke="currentColor" 
                 stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="17 8 12 3 7 8"></polyline>
                <line x1="12" y1="3" x2="12" y2="15"></line>
            </svg>
            <span>Upload a File</span>
            <span style="font-size: 12px;">Drag and drop files here</span>
        </div>
        {{ form_widget(form.ubicacion.coordenadas) }}
        <ul id="evidencias-list" data-prototype="{{ form_widget(form.evidencias.vars.prototype)|e('html_attr') }}" style="list-style: none; padding: 0;"></ul>
        <div id="selected-files-preview" class="selected-files-preview"></div>
    </div>

    <div class="form-group text-center">
        <button type="submit" class="register-button">Actualizar</button>
    </div>

    {{ form_end(form) }}
</div>

<script>
    // Manejo del dropdown del perfil
    document.addEventListener('DOMContentLoaded', function() {
        const profileButton = document.getElementById('profileButton');
        const profileDropdown = document.getElementById('profileDropdown');
        
        if (profileButton && profileDropdown) {
            profileButton.addEventListener('click', function(e) {
                e.stopPropagation();
                profileDropdown.classList.toggle('show');
            });
            document.addEventListener('click', function() {
                profileDropdown.classList.remove('show');
            });
        }
        
        // Manejo de evidencia
        const evidenceUploadContainer = document.getElementById('evidence-upload-container');
        const addEvidenciaBtn = document.getElementById('add-evidencia-btn');
        const evidenciasList = document.getElementById('evidencias-list');
        const selectedFilesDiv = document.getElementById('selected-files');
        
        if (evidenceUploadContainer && evidenciasList) {
            evidenceUploadContainer.addEventListener('click', function() {
                if (addEvidenciaBtn) {
                    addEvidenciaBtn.click();
                } else {
                    const prototype = evidenciasList.dataset.prototype;
                    const index = evidenciasList.children.length;
                    const newForm = prototype.replace(/_name_/g, index);
                    const newFormLi = document.createElement('li');
                    newFormLi.innerHTML = newForm;
                    evidenciasList.appendChild(newFormLi);
                    const fileInput = newFormLi.querySelector('input[type="file"]');
                    if (fileInput) {
                        fileInput.click();
                        
                        // Mostrar nombres de archivos seleccionados
                        fileInput.addEventListener('change', function() {
                            if (this.files.length > 0) {
                                let fileNames = '';
                                for (let i = 0; i < this.files.length; i++) {
                                    fileNames += '<div>• ' + this.files[i].name + '</div>';
                                }
                                if (selectedFilesDiv) {
                                    selectedFilesDiv.innerHTML += fileNames;
                                }
                            }
                        });
                    }
                }
            });
        }
        
        // Funcionalidad para eliminar evidencias existentes
        const evidenciasEliminar = [];
        const inputEvidenciasEliminar = document.getElementById('evidencias_eliminar');
        const botonesEliminar = document.querySelectorAll('.evidence-remove');
        
        botonesEliminar.forEach(function(boton) {
            boton.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                evidenciasEliminar.push(id);
                inputEvidenciasEliminar.value = evidenciasEliminar.join(',');
                
                // Ocultar la evidencia en la interfaz con animación
                const item = this.parentElement;
                item.style.transition = 'all 0.3s ease';
                item.style.opacity = '0.3';
                item.style.transform = 'scale(0.9)';
                item.style.pointerEvents = 'none';
            });
        });
    });

    // Mapa y geocodificación
    function initializeMap() {
        const mapElement = document.getElementById('map');
        if (!mapElement) return;
        if (mapElement._leaflet_id) {
            mapElement._leaflet_id = null;
        }
        
        // Limpiar el contenedor del mapa antes de inicializar
        mapElement.innerHTML = '';
        
        // Obtener coordenadas iniciales (si existen en el formulario)
        const coordsField = document.getElementById('{{ form.ubicacion.coordenadas.vars.id }}');
        let initialCoords = [-27.362778, -55.900555]; // Coordenadas por defecto
        
        if (coordsField && coordsField.value) {
            const coords = coordsField.value.split(',');
            if (coords.length === 2) {
                initialCoords = [parseFloat(coords[0]), parseFloat(coords[1])];
            }
        }
        
        window.map = L.map(mapElement).setView(initialCoords, 15);
        L.tileLayer(`https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png`, {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(window.map);
        
        const redIcon = L.icon({
            iconUrl: '/images/marker-icon.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34]
        });
        
        const marker = L.marker(initialCoords, {
            draggable: true,
            icon: redIcon
        }).addTo(window.map);
        
        window.map.on('click', (e) => {
            const { lat, lng } = e.latlng;
            placeMarker(marker, lat, lng);
            reverseGeocode(lat, lng);
        });
        
        marker.on('moveend', (e) => {
            const { lat, lng } = e.target.getLatLng();
            updateCoords(lat, lng);
            reverseGeocode(lat, lng);
        });
        
        function placeMarker(marker, lat, lng) {
            marker.setLatLng([lat, lng]).openPopup();
            updateCoords(lat, lng);
        }
        
        function updateCoords(lat, lng) {
            const coordsField = document.getElementById('{{ form.ubicacion.coordenadas.vars.id }}');
            if (coordsField) {
                coordsField.value = `${lat},${lng}`;
            }
        }

        async function reverseGeocode(lat, lng) {
            try {
                const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;
                const response = await fetch(url);
                const data = await response.json();
                if (data.address) {
                    const road = data.address.road || '';
                    const houseNumber = data.address.house_number || '';
                    const calleField = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
                    const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
                    if (calleField) calleField.value = road;
                    if (numeroField) numeroField.value = houseNumber;
                }
            } catch (error) {
                console.error('Error en geocodificación inversa:', error);
            }
        }
        
        async function onAddressChange() {
            const calleField = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
            const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
            if (!calleField || !numeroField) return;
            const calle = calleField.value;
            const numero = numeroField.value;
            if (!calle && !numero) return;
            const address = `${calle} ${numero}, Misiones`;
            try {
                const url = `https://nominatim.openstreetmap.org/search?format=jsonv2&q=${encodeURIComponent(address)}`;
                const response = await fetch(url);
                const data = await response.json();
                if (data.length > 0) {
                    const { lat, lon } = data[0];
                    placeMarker(marker, lat, lon);
                    window.map.setView([lat, lon], 15);
                }
            } catch (error) {
                console.error('Error en geocodificación directa:', error);
            }
        }
        
        const calleField = document.getElementById('{{ form.ubicacion.calle.vars.id }}');
        const numeroField = document.getElementById('{{ form.ubicacion.numero.vars.id }}');
        if (calleField) calleField.addEventListener('change', onAddressChange);
        if (numeroField) numeroField.addEventListener('change', onAddressChange);

        // Forzar una actualización del mapa
        setTimeout(() => {
            window.map.invalidateSize();
        }, 100);
    }

    // Intentar inicializar el mapa cuando el DOM esté listo
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeMap);
    } else {
        initializeMap();
    }

    // También inicializar cuando la ventana cambie de tamaño
    window.addEventListener('resize', function() {
        const mapElement = document.getElementById('map');
        if (mapElement && mapElement._leaflet_id) {
            const map = L.DomUtil.get(mapElement)._leaflet_map;
            if (map) {
                map.invalidateSize();
            }
        }
    });

    // Soporte para arrastrar y soltar archivos
    document.addEventListener('DOMContentLoaded', function() {
        const evidenceUpload = document.querySelector('.evidence-upload');
        const evidenciasList = document.getElementById('evidencias-list');
        const selectedFilesDiv = document.getElementById('selected-files');
        
        if (evidenceUpload && evidenciasList) {
            // Prevenir comportamiento por defecto para permitir soltar archivos
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                evidenceUpload.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            // Resaltar área al arrastrar
            ['dragenter', 'dragover'].forEach(eventName => {
                evidenceUpload.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                evidenceUpload.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                evidenceUpload.style.borderColor = '#ECB13A';
                evidenceUpload.style.backgroundColor = '#252849';
            }
            
            function unhighlight() {
                evidenceUpload.style.borderColor = '#2e325a';
                evidenceUpload.style.backgroundColor = '#232644';
            }
            
            // Manejar archivos soltados
            evidenceUpload.addEventListener('drop', handleDrop, false);
            
            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                
                if (files.length > 0) {
                    const prototype = evidenciasList.dataset.prototype;
                    
                    for (let i = 0; i < files.length; i++) {
                        const index = evidenciasList.children.length;
                        const newForm = prototype.replace(/_name_/g, index);
                        const newFormLi = document.createElement('li');
                        newFormLi.innerHTML = newForm;
                        evidenciasList.appendChild(newFormLi);
                        
                        const fileInput = newFormLi.querySelector('input[type="file"]');
                        if (fileInput) {
                            // Crear un nuevo objeto DataTransfer
                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(files[i]);
                            fileInput.files = dataTransfer.files;
                            
                            // Mostrar nombre del archivo
                            if (selectedFilesDiv) {
                                selectedFilesDiv.innerHTML += `<div>• ${files[i].name}</div>`;
                            }
                        }
                    }
                }
            }
        }
    });

    function initEvidenceUpload() {
        const uploadContainer = document.getElementById('evidence-upload-container');
        const evidenciasList = document.getElementById('evidencias-list');
        const previewDiv = document.getElementById('selected-files-preview');
        if (uploadContainer && evidenciasList) {
            uploadContainer.replaceWith(uploadContainer.cloneNode(true));
            const newUploadContainer = document.getElementById('evidence-upload-container');
            newUploadContainer.addEventListener('click', () => {
                const prototype = evidenciasList.dataset.prototype;
                const index = evidenciasList.children.length;
                const newForm = prototype.replace(/_name_/g, index);
                const li = document.createElement('li');
                li.innerHTML = newForm;
                evidenciasList.appendChild(li);
                const fileInput = li.querySelector('input[type="file"]');
                if (fileInput) {
                    fileInput.click();
                    fileInput.addEventListener('change', function() {
                        if (this.files.length > 0) {
                            for (let i = 0; i < this.files.length; i++) {
                                const file = this.files[i];
                                const thumb = document.createElement('span');
                                thumb.className = 'file-thumb';
                                if (file.type.startsWith('image/')) {
                                    const img = document.createElement('img');
                                    img.src = URL.createObjectURL(file);
                                    img.onload = () => URL.revokeObjectURL(img.src);
                                    thumb.appendChild(img);
                                }
                                thumb.appendChild(document.createTextNode(file.name));
                                previewDiv.appendChild(thumb);
                            }
                        }
                    });
                }
            });
        }
    }
    document.addEventListener('DOMContentLoaded', initEvidenceUpload);
    document.addEventListener('turbo:load', initEvidenceUpload);
</script>
{% endblock %}
